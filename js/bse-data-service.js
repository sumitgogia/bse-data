class BseDataService{myDateFormatter=new Intl.DateTimeFormat("fr-CA",{year:"numeric",month:"2-digit",day:"2-digit"});sqlJsVersion="1.8.0";sqlDataTableName="data";queryFile="../sql/data.sql";db;api_key="AIzaSyDhMh6MVafYcdw3Wd2-VuurVd----eXfyI";folderId="1tee0Dxdu8hT_V3psEKCQxnd5cqTz3Pkv";csvNameRegex=new RegExp(`${this.sqlDataTableName}_(\\d{8})_to_(\\d{8})\\.csv$`);dataFileQuery=`'${this.folderId}' in parents and name contains '${this.sqlDataTableName}' and mimeType = 'text/csv'`;filesInfoFromDrive={};fileInDB={};constructor(){}async executeQuery(e="",t=[]){return fetch(this.queryFile).then((e=>e.text())).then((a=>this.db.exec(a.replace("$conditions",e),t)))}parseCsv(e,t){let a=`https://www.googleapis.com/drive/v2/files/{fileId}?alt=media&key=${this.api_key}`;return a=a.replace("{fileId}",e),new Promise(((i,s)=>{Papa.parse(a,{download:!0,header:!0,skipEmptyLines:!0,dynamicTyping:!0,worker:!0,step:a=>{a.errors&&a.errors.length&&console.error("Errors encountered for ("+this.filesInfoFromDrive[e].name+"):\n"+JSON.stringify(a.errors)+"\nMeta: "+JSON.stringify(a.meta)),a.data&&t(a.data)},complete:e=>i(e),error:e=>s(e)})}))}fillDB(e){Array.isArray(e)||(e=[e]);let t=Object.keys(e[0]).join(", ");const a=`\n        CREATE TABLE IF NOT EXISTS ${this.sqlDataTableName} (${t});\n        CREATE INDEX IF NOT EXISTS scrip_cd on ${this.sqlDataTableName} (SCRIP_CD);\n        CREATE INDEX IF NOT EXISTS dissem_dt on ${this.sqlDataTableName} (DissemDT);\n        `;this.db.exec(a),e.forEach((e=>{const t=Object.values(e).map((e=>"string"==typeof e?`'${e.replace(/'/g,"''")}'`:null==e?"null":e)).join(", ");this.db.exec(`INSERT INTO ${this.sqlDataTableName} VALUES (${t})`)}))}async fetchFilesMetaFromDrive(e){let t=[];try{if(t=(await gapi.client.drive.files.list({q:e})).result.files,!t.length)throw new Error("No matching data files could be loaded")}catch(e){throw console.error("Error listing files: "+e.result.error.message),e}return t.forEach((e=>{this.filesInfoFromDrive[e.id]={...e};const t=e.name.match(this.csvNameRegex);if(null===t)return void console.error(`Fetched file that does not match data file name pattern: ${e.name}`);const a=new Date(t[1].substr(0,4),t[1].substr(4,2)-1,t[1].substr(6,2)),i=new Date(t[2].substr(0,4),t[2].substr(4,2)-1,t[2].substr(6,2));this.filesInfoFromDrive[e.id]={...e,from:a,to:i}})),this.filesInfoFromDrive}async initGapi(e){await new Promise((e=>{gapi.load("client",(()=>{e()}))})),await gapi.client.init({apiKey:e,discoveryDocs:["https://www.googleapis.com/discovery/v1/apis/drive/v3/rest"]})}async announcements(e){const t=e.dateRange||{},a=new Date,i=t.from||a,s=t.to||a,r=Object.entries(this.filesInfoFromDrive).map((async([e,t])=>{if(!(!t.to||t.to<i||t.to>s||this.fileInDB[e]))return this.parseCsv(e,(e=>this.fillDB(e))).then((()=>(this.fileInDB[e]=!0,e)))}));await Promise.all(r);if(!Object.entries(this.fileInDB).find((([e,t])=>!!t)))return[];const n={$from:this.myDateFormatter.format(i),$to:this.myDateFormatter.format(s)};return await this.executeQuery("and Date(DissemDT) >= $from and Date(DissemDT) <= $to",n)}async init(){const e=this.initGapi(this.api_key).then((()=>this.fetchFilesMetaFromDrive(this.dataFileQuery))),t=initSqlJs({locateFile:e=>`https://cdnjs.cloudflare.com/ajax/libs/sql.js/${this.sqlJsVersion}/${e}`}),[a,i]=await Promise.all([e,t]);return this.db=new i.Database,this}}const bseDataService=await(new BseDataService).init();export default bseDataService;